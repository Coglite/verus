// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ArrayOf should fail if some values are invalid 1`] = `
Object {
  "errors": Object {
    "invalidIndices": Array [
      Array [
        1,
        Object {
          "expectedFormat": "ISO 8601 date",
          "name": "ISODate",
          "type": "parse",
        },
      ],
      Array [
        3,
        Object {
          "expectedFormat": "ISO 8601 date",
          "name": "ISODate",
          "type": "parse",
        },
      ],
    ],
    "name": "ArrayOf<ISODate>",
    "type": "array",
  },
  "message": "[1] did not match 'ISO 8601 date'-format
[3] did not match 'ISO 8601 date'-format
",
  "valid": false,
}
`;

exports[`ArrayOf should fail on non-array value 1`] = `
Object {
  "errors": Object {
    "actual": "number",
    "expected": "array",
    "name": "expect",
    "type": "type",
  },
  "message": "value is the wrong type, expected array, got number
",
  "valid": false,
}
`;

exports[`ArrayOf should transform values to a new array 1`] = `
Object {
  "valid": true,
  "value": Array [
    2007-04-05T16:30:00.000Z,
    2008-04-05T16:30:00.000Z,
    2009-04-05T16:30:00.000Z,
    2010-11-05T16:30:00.000Z,
  ],
}
`;

exports[`ArrayOf should validate an array of strings 1`] = `
Object {
  "valid": true,
  "value": Array [
    "foo",
    "bar",
    "baz",
  ],
}
`;

exports[`Async should fail on invalid value 1`] = `
Object {
  "errors": Object {
    "message": "is invalid!",
    "name": "Async",
    "type": "async",
  },
  "message": "value failed async validation: \\"is invalid!\\"
",
  "valid": false,
}
`;

exports[`Async should succeed on valid value 1`] = `
Object {
  "valid": true,
  "value": true,
}
`;

exports[`Dict should fail on invalid values 1`] = `
Object {
  "errors": Object {
    "fields": Object {
      "bar": Object {
        "actual": "date",
        "expected": "number",
        "name": "Number",
        "type": "type",
      },
      "world": Object {
        "actual": "string",
        "expected": "number",
        "name": "Number",
        "type": "type",
      },
    },
    "name": "Dict(Number)",
    "type": "dict",
  },
  "message": "Dict(Number)['world'] is the wrong type, expected number, got string
Dict(Number)['bar'] is the wrong type, expected number, got date
",
  "valid": false,
}
`;

exports[`Dict should succeed on valid value 1`] = `
Object {
  "valid": true,
  "value": Object {
    "hello": 324,
    "world": 123,
  },
}
`;

exports[`Error messages should produce 3 lines of error messages 1`] = `
"Cart.created did not match 'ISO 8601 date'-format
Cart.items[0] failed all validators: Product | Subscription | Gift
Cart.items[2] failed all validators: Product | Subscription | Gift
"
`;

exports[`ISODate should not allow invalid dates 1`] = `
Object {
  "errors": Object {
    "expectedFormat": "ISO 8601 date",
    "name": "ISODate",
    "type": "parse",
  },
  "message": "value did not match 'ISO 8601 date'-format
",
  "valid": false,
}
`;

exports[`ISODate should not allow non-string values 1`] = `
Object {
  "errors": Object {
    "actual": "number",
    "expected": "string",
    "name": "expect",
    "type": "type",
  },
  "message": "value is the wrong type, expected string, got number
",
  "valid": false,
}
`;

exports[`ISODate should parse ISO 8601 dates 1`] = `
Object {
  "valid": true,
  "value": 2007-04-05T16:30:00.000Z,
}
`;

exports[`Shape should detect invalid simple shape 1`] = `
Object {
  "errors": Object {
    "fields": Object {
      "name": Object {
        "actual": "number",
        "expected": "string",
        "name": "String",
        "type": "type",
      },
    },
    "name": "Shape",
    "shapeName": "User",
    "type": "shape",
  },
  "message": "User.name is the wrong type, expected string, got number
",
  "valid": false,
}
`;

exports[`Shape should optionally not allow extra fields in value 1`] = `
Object {
  "errors": Object {
    "extra": Object {
      "dogs": "array",
    },
    "fields": Object {},
    "name": "Shape",
    "shapeName": "NoExtraUser",
    "type": "shape",
  },
  "message": "NoExtraUser.dogs is an unexpected field with type array
",
  "valid": false,
}
`;

exports[`Shape should optionally not allow extra fields in value 2`] = `
Object {
  "valid": true,
  "value": NoExtraUser {
    "name": "Jane Smith",
  },
}
`;

exports[`Shape should optionally not allow extra fields in value 3`] = `
Object {
  "errors": Object {
    "extra": Object {
      "dogs": "array",
    },
    "fields": Object {
      "name": Object {
        "actual": "number",
        "expected": "string",
        "name": "String",
        "type": "type",
      },
    },
    "name": "Shape",
    "shapeName": "NoExtraUser",
    "type": "shape",
  },
  "message": "NoExtraUser.name is the wrong type, expected string, got number
NoExtraUser.dogs is an unexpected field with type array
",
  "valid": false,
}
`;

exports[`Shape should validate simple shape 1`] = `
Object {
  "valid": true,
  "value": User {
    "dogs": Array [
      "Fluffy",
    ],
    "name": "Jane Smith",
  },
}
`;

exports[`String should fail if length < minLength 1`] = `
Object {
  "errors": Object {
    "length": 3,
    "minLength": 4,
    "name": "String",
    "type": "length",
  },
  "message": "value is too short, min length is 4, was 3
",
  "valid": false,
}
`;

exports[`String should fail if length > maxLength 1`] = `
Object {
  "errors": Object {
    "length": 4,
    "maxLength": 3,
    "name": "String",
    "type": "length",
  },
  "message": "value is too long, max length is 3, was 4
",
  "valid": false,
}
`;

exports[`String should not validate if value is not string 1`] = `
Object {
  "errors": Object {
    "actual": "number",
    "expected": "string",
    "name": "String",
    "type": "type",
  },
  "message": "value is the wrong type, expected string, got number
",
  "valid": false,
}
`;

exports[`String should validate if length < maxLength 1`] = `
Object {
  "valid": true,
  "value": "qwe",
}
`;

exports[`String should validate if length > minLength 1`] = `
Object {
  "valid": true,
  "value": "qwerty",
}
`;

exports[`Union should match valid value 1`] = `
Object {
  "valid": true,
  "value": "b",
}
`;

exports[`Union should not match invalid value 1`] = `
Object {
  "errors": Object {
    "name": "Union(a|b|c)",
    "type": "union",
  },
  "message": "value did not match union Union(a|b|c)
",
  "valid": false,
}
`;
